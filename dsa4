// 4.Implement double ended queue using singly linked list:
#include <stdio.h>
#include <conio.h>  // For Turbo C++ functions
#include <stdlib.h>

struct node {
    int data;
    struct node *next;
};

struct node *head = NULL; // Global pointer to maintain the linked list

void insert_front() {
    struct node *newnode = (struct node*)malloc(sizeof(struct node));
    if (newnode == NULL) {
        printf("Memory allocation failed\n");
        return;
    }
    printf("Enter data: ");
    scanf("%d", &newnode->data);
    newnode->next = head;
    head = newnode;
}

void insert_rear() {
    struct node *newnode = (struct node*)malloc(sizeof(struct node));
    if (newnode == NULL) {
        printf("Memory allocation failed\n");
        return;
    }
    printf("Enter data: ");
    scanf("%d", &newnode->data);
    newnode->next = NULL;

    if (head == NULL) {  // Checking if list is empty
        head = newnode;
        return;
    }

    struct node *temp = head;
    while (temp->next != NULL)
     temp = temp->next;
    temp->next = newnode;
}

void delete_front() {
    if (head == NULL) {  // Checking if list is empty
        printf("Queue is empty\n");
        return;
    }
    struct node *temp = head;
    head = head->next;
    printf("%d deleted\n", temp->data);
    free(temp);
}

void delete_rear() {
    if (head == NULL) {  // Checking if list is empty
        printf("Queue is empty\n");
        return;
    }
    if (head->next == NULL) {  // Only one node in the list
        printf("%d deleted\n", head->data);
        free(head);
        head = NULL;
        return;
    }

    struct node *temp = head;
    while (temp->next->next != NULL)
     temp = temp->next;
    printf("%d deleted\n", temp->next->data);
    free(temp->next);
    temp->next = NULL;
}

void display() {
    if (head == NULL) {  // Checking if list is empty
        printf("Queue is empty\n");
        return;
    }

    struct node *temp = head;
    printf("Queue: ");
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

void main() {
    int option, sub_option;
    clrscr();  // Clear screen for Turbo C++

    while (1) {
        printf("\n1. Entry Restricted Queue\n2. Exit Restricted Queue\n3. Display\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &option);

        switch (option) {
            case 1:
                printf("\n1. Insert at Rear\n2. Delete from Front\n3. Delete from Rear\n");
                scanf("%d", &sub_option);
                if (sub_option == 1)
                 insert_rear();
                else if (sub_option == 2)
                 delete_front();
                else if (sub_option == 3)
                 delete_rear();
                else
                 printf("Invalid choice\n");
                break;

            case 2:
                printf("\n1. Delete from Front\n2. Insert at Front\n3. Insert at Rear\n");
                scanf("%d", &sub_option);
                if (sub_option == 1)
                 delete_front();
                else if (sub_option == 2)
                 insert_front();
                else if (sub_option == 3)
                 insert_rear();
                else printf("Invalid choice\n");
                break;

            case 3:
                display();
                break;

            case 4:
                printf("Exiting program...\n");
                getch();  // Wait for user input before exit (Turbo C++)
                return;   // Exit the loop properly

            default:
                printf("Invalid choice\n");
        }
    }
}
