6. Perform various operations in Doubly Linked List.

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *prev;
    struct Node *next;
};

struct Node *head = NULL; // Global pointer to maintain the list

void insert_rear() {
    struct Node *newnode, *temp;

    newnode = (struct Node *)malloc(sizeof(struct Node));
    if (!newnode) {
        printf("Memory allocation failed!\n");
        return;
    }

    printf("Enter data: ");
    scanf("%d", &newnode->data);
    newnode->next = NULL;
    newnode->prev = NULL;

    if (head == NULL) {
        head = newnode;
        return;
    }

    temp = head;
    while (temp->next != NULL) temp = temp->next;

    temp->next = newnode;
    newnode->prev = temp;
}

void insert_position() {
    struct Node *newnode, *temp;
    int pos, i;

    newnode = (struct Node *)malloc(sizeof(struct Node));
    if (!newnode) {
        printf("Memory allocation failed!\n");
        return;
    }

    printf("Enter data: ");
    scanf("%d", &newnode->data);
    printf("Enter position: ");
    scanf("%d", &pos);

    newnode->next = NULL;
    newnode->prev = NULL;

    if (pos < 1) {
        printf("Invalid position!\n");
        free(newnode);
        return;
    }

    if (pos == 1) { // Insert at front if position is 1
        newnode->next = head;
        if (head != NULL) {
            head->prev = newnode;
        }
        head = newnode;
        return;
    }

    temp = head;
    for (i = 1; i < pos - 1 && temp != NULL; i++) {
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Invalid position!\n");
        free(newnode);
        return;
    }

    newnode->next = temp->next;
    newnode->prev = temp;
    if (temp->next != NULL) {
        temp->next->prev = newnode;
    }
    temp->next = newnode;
}

void delete_position() {
    struct Node *temp;
    int pos, i;

    if (head == NULL) {
        printf("List is empty\n");
        return;
    }

    printf("Enter position to delete: ");
    scanf("%d", &pos);

    if (pos < 1) {
        printf("Invalid position!\n");
        return;
    }

    temp = head;

    if (pos == 1) { // Deleting the first node
        head = head->next;
        if (head != NULL) {
            head->prev = NULL;
        }
        printf("%d deleted\n", temp->data);
        free(temp);
        return;
    }

    for (i = 1; i < pos && temp != NULL; i++) {
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Invalid position!\n");
        return;
    }

    temp->prev->next = temp->next;
    if (temp->next != NULL) {
        temp->next->prev = temp->prev;
    }

    printf("%d deleted\n", temp->data);
    free(temp);
}

void display() {
    struct Node *temp;

    if (head == NULL) {
        printf("List is empty\n");
        return;
    }

    temp = head;
    while (temp != NULL) {
        printf("%d", temp->data);
        if (temp->next) printf(" <-> ");
        temp = temp->next;
    }
    printf("\n");
}

void main() {
    int option;
    clrscr();

    while (1) {
        printf("\n1. Insert at Rear\n2. Insert at Position\n3. Delete at Position\n4. Display\n5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &option);

        switch (option) {
            case 1:
                insert_rear();
                break;
            case 2:
                insert_position();
                break;
            case 3:
                delete_position();
                break;
            case 4:
                display();
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
        getch();
        clrscr();
    }
}
