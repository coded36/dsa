8. Perform insert and delete operations in binary search tree.
#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *left, *right;
};

// Function prototypes
struct node* create(int data);
struct node* insert(struct node* root, int data);
struct node* findmin(struct node* root);
struct node* deleteNode(struct node* root, int data); 
void inorder(struct node* root);

struct node* create(int data) {
    struct node* newnode;
    newnode = (struct node*)malloc(sizeof(struct node));

    if (!newnode) {
        printf("Creation of new node failed");
        return NULL;
    }
    newnode->data = data;
    newnode->left = newnode->right = NULL;
    return newnode;
}

struct node* insert(struct node* root, int data) {
    if (root == NULL) {
        return create(data);
    }

    if (data < root->data) {
        root->left = insert(root->left, data);
    } else if (data > root->data) {
        root->right = insert(root->right, data);
    }

    return root;
}

struct node* findmin(struct node* root) {
    while (root->left != NULL) {
        root = root->left;
    }
    return root;
}

struct node* deleteNode(struct node* root, int data) {  // Renamed function to avoid C++ keyword conflict
    struct node* temp;

    if (root == NULL) {
        return root;
    } else if (data < root->data) {
        root->left = deleteNode(root->left, data);
    } else if (data > root->data) {
        root->right = deleteNode(root->right, data);
    } else {
        if (root->left == NULL && root->right == NULL) { // Case 1: No child
            free(root);
            return NULL;
        }
        if (root->left == NULL) { // Case 2: One right child
            temp = root->right;
            free(root);
            return temp;
        }
        if (root->right == NULL) { // Case 2: One left child
            temp = root->left;
            free(root);
            return temp;
        }

        // Case 3: Two children
        temp = findmin(root->right);
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }

    return root;
}

void inorder(struct node* root) {
    if (root == NULL) {
        return;
    }
    inorder(root->left);
    printf("%d ", root->data);
    inorder(root->right);
}

int main() {
    struct node* root = NULL;  // Declared at the beginning
    int choice, item;  // Declared at the beginning

    do {
        printf("\nBinary Search Tree Operations:\n");
        printf("1. Insert\n2. Delete\n3. Display\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the data to insert: ");
                scanf("%d", &item);
                root = insert(root, item);
                break;

            case 2:
                printf("Enter the data to delete: ");
                scanf("%d", &item);
                root = deleteNode(root, item);
                break;

            case 3:
                inorder(root);
                printf("\n");
                break;

            case 4:
                exit(0);
                break;

            default:
                printf("Invalid choice\n");
        }
    } while (choice != 4);

    return 0;
}
